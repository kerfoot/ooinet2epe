function OUT_FILE = writeOoiGliderFlatNc(pStruct, trajectoryString, varargin)
%
% OUT_FILE = writeGliderFlatNc(pStruct, trajectoryString[,varargin])
%
% See also mergeIonGliderDatasets selectOoiGliderFlatNcSensors getOoiGliderFlatNcAttributes
%
% ============================================================================
% $RCSfile$
% $Source$
% $Revision$
% $Date$
% $Author$
% ============================================================================
%

app = mfilename;

REQUIRED_FIELDS = {'meta',...
    'vars'}';
REQUIRED_META_FIELDS = {'glider',...
    'startDatenum',...
    'endDatenum',...
    'lonLat',...
    }';
DATENUM_CUTOFF = 1000000;

% Validate inputs
if nargin < 2
    error(sprintf('%s:nargin', app),...
        'You must specify a profiles data structure and trajectory string');
elseif ~isstruct(pStruct) || isempty(pStruct)
    error(sprintf('%s:invalidArgument', app),...
        'pStruct must be a data structure representing a single profile');
elseif isempty(trajectoryString) || ~ischar(trajectoryString)
    error(sprintf('%s:invalidArgument', app),...
        'trajectoryString must be a string formatted as: YYYYmmddTHHMM');
elseif ~isequal(length(intersect(fieldnames(pStruct), REQUIRED_FIELDS)), length(REQUIRED_FIELDS))
    error(sprintf('%s:invalidArgument', app),...
        'pStruct is missing one or more required fields');
elseif ~isequal(length(intersect(fieldnames(pStruct.meta), REQUIRED_META_FIELDS)), length(REQUIRED_META_FIELDS))
    error(sprintf('%s:invalidArgument', app),...
        'pStruct.meta is missing one or more required fields');
end

% Default options
CLOBBER = false;
GLOBAL_ATTRIBUTES = [];
NETCDF4 = true;
FLOAT_FILL_VALUE = -999;
BYTE_FILL_VALUE = netcdf.getConstant('NC_FILL_BYTE');
OUT_DIR = pwd;
OUT_FILE = '';
PROFILE_ID = 1;
% Process options
for x = 1:2:length(varargin)
    name = varargin{x};
    value = varargin{x+1};
    switch lower(name)
        case 'clobber'
            if ~isequal(numel(value),1) || ~islogical(value)
                error(sprintf('%s:invalidOptionValue', app),...
                    'Value for option %s must be a logical value',...
                    name);
            end
            CLOBBER = value;
        case 'attributes'
            if ~isstruct(value) || ~isequal(length(struct),1)
                error(sprintf('%s:invalidOptionValue', ap),...
                    'Value for option %s must be a structured array mapping attribute names to values',...
                    name);
            end
            GLOBAL_ATTRIBUTES = value;
        case 'netcdf4'
            if ~isequal(numel(value),1) || ~islogical(value)
                error(sprintf('%s:invalidOptionValue', app),...
                    'Value for option %s must be a logical value',...
                    name);
            end
            NETCDF4 = value;
        case 'outfilename'
            if ~ischar(value) || isempty(value)
                error(sprintf('%s:invalidOptionValue', app),...
                    'Value for option %s must be a string specifying the filename to write',...
                    name);
            end
            OUT_FILE = value;
        case 'outdirectory'
            if ~ischar(value) || isempty(value) || ~isdir(value)
                error(sprintf('%s:invalidOptionValue', app),...
                    'Value for option %s must be a string specifying a valid directory to write',...
                    name);
            end
            OUT_DIR = value;
        case 'profileid'
            if ~isequal(numel(value),1) || isempty(value) || ~isnumeric(value)
                error(sprintf('%s:invalidOptionValue', app),...
                    'Value for option %s must be a numeric scalar',...
                    name);
            end
            PROFILE_ID = value;
        otherwise
            error(sprintf('%s:invalidOption', app),...
                'Invalid option specified: %s',...
                name);
    end
end

% Variables to write to the file
ARRAY_VARS = {'time',...
    'lat',...
    'lon',...
    'pressure',...
    'depth',...
    'temperature',...
    'conductivity',...
    'salinity',...
    'density',...
    'bb',...
    'chla',...
    'oxygen_conc',...
    'oxygen_sat',...
    }';
SCALAR_VARS = {
    'profile_id',...
    'profile_time',...
    'profile_lat',...
    'profile_lon',...
    }';
    
% Create all required variables
REQUIRED_VARS = unique([ARRAY_VARS; SCALAR_VARS]);
% Variables in the input data structure
ncVars = {pStruct.vars.ncVarName}';

% Ensure all REQUIRED_VARS are in pStruct.vars
if ~isequal(length(intersect(REQUIRED_VARS, ncVars)), length(ncVars))
    warning(sprintf('%s:missingVariable', app),...
        '%s: One or more required variables missing\n',...
        app);
    OUT_FILE = '';
    return;
end

% File creation modes
MODES = {'CLASSIC_MODEL'};
if NETCDF4
    MODES{end+1} = 'NETCDF4';
end
if CLOBBER
    MODES{end+1} = 'NC_CLOBBER';
else
    MODES{end+1} = 'NC_NOCLOBBER';
end

% bitor the MODES constants
ncMode = netcdf.getConstant(MODES{1});
for x = 2:length(MODES)
    ncMode = bitor(ncMode, netcdf.getConstant(MODES{x}));
end

% Create the filename, if not specified
if isempty(OUT_FILE)
    OUT_FILE = fullfile(OUT_DIR,...
        sprintf('%s-%s.nc', pStruct.meta.glider, datestr(pStruct.meta.startDatenum, 'yyyymmddTHHMM')));
else
    ncP = fileparts(OUT_FILE);
    if ~isdir(ncP)
        warning(sprintf('%s:invalidDirectory', app),...
            'The specified output directory does not exist: %s\n',...
            ncP);
        OUT_FILE = '';
        return;
    end
end

% Make sure pStruct has a 'time' field

[~,TI] = intersect(ncVars, 'time');
if isempty(TI) || isempty(pStruct.vars(TI).data)
    error(sprintf('%s:missingField', app),...
        'pStruct must have a non-empty ''time'' field');
end

% Find the non-NaN rows in pStruct.vars(TI).data 
goodRows = find(~isnan(pStruct.vars(TI).data));
if isequal(length(goodRows),0)
    warning(sprintf('%s:noValidRecords', app),...
        'The ''time'' array contains no valid rows\n');
    OUT_FILE = '';
    return;
end

% Create the file with the specified creation modes
try
    ncId = netcdf.create(OUT_FILE, ncMode);
catch
    keyboard;
end

% Retreive attributes structure
gAtts = getOoiGliderFlatNcAttributes();
% Merge/overwrite the defaults attributes with any user-specified
% attributes
if ~isempty(GLOBAL_ATTRIBUTES)
    pFields = fieldnames(GLOBAL_ATTRIBUTES);
    for x = 1:length(pFields)
        gAtts.(pFields{x}) = GLOBAL_ATTRIBUTES.(pFields{x});
    end
end

% Add some global attributes (glider or deployment independent)
gAtts.history = mfilename('fullpath');
gAtts.date_created = datestr(now, 'yyyy-mm-ddTHH:MM:SSZ');
gAtts.date_issued = datestr(now, 'yyyy-mm-ddTHH:MM:SSZ');

% Add the global attributes
gId = netcdf.getConstant('NC_GLOBAL');
pFields = sort(fieldnames(gAtts));
for x = 1:length(pFields)
    netcdf.putAtt(ncId, gId, pFields{x}, gAtts.(pFields{x}));
end

% Create the dimensions
% time dimension
NUM_ROWS = length(pStruct.vars(TI).data(goodRows));
rowDim = netcdf.defDim(ncId,...
    'time',...
    NUM_ROWS);
% Trajectory dimension
trajDim = netcdf.defDim(ncId,...
    'traj_strlen',...
    length(trajectoryString));

% Create the variables ====================================================

% time
% Define profile_time variable
varId = netcdf.defVar(ncId,...
    'time',...
    netcdf.getConstant('NC_DOUBLE'),...
    rowDim);
% Define and add attributes
varAtts = struct('long_name', 'Time',...
    'standard_name', 'time',...
    'units', 'seconds since 1970-01-01T00:00:00Z',...
    'ancillary_variables', '');
attNames = sort(fieldnames(varAtts));
for x = 1:length(attNames)
    netcdf.putAtt(ncId, varId, attNames{x}, varAtts.(attNames{x}));
end
% Set variable compression
netcdf.defVarDeflate(ncId,...
    varId,...
    true,...
    true,...
    1);

% trajectory
varId = netcdf.defVar(ncId,...
    'trajectory',...
    netcdf.getConstant('NC_CHAR'),...
    trajDim);
% Define and add attributes
varAtts = struct('long_name', 'Trajectory Name',...
    'cf_role', 'trajectory_id',...
    'units', '1',...
    'comment', 'A trajectory is a glider deployment');
attNames = sort(fieldnames(varAtts));
for x = 1:length(attNames)
    netcdf.putAtt(ncId, varId, attNames{x}, varAtts.(attNames{x}));
end
% Set variable compression
netcdf.defVarDeflate(ncId,...
    varId,...
    true,...
    true,...
    1);

% lat
% Define profile_time variable
varId = netcdf.defVar(ncId,...
    'lat',...
    netcdf.getConstant('NC_DOUBLE'),...
    rowDim);
% Define and add attributes
varAtts = struct('long_name', 'Latitude',...
    'standard_name', 'latitude',...
    'units', 'degrees_north');
attNames = sort(fieldnames(varAtts));
for x = 1:length(attNames)
    netcdf.putAtt(ncId, varId, attNames{x}, varAtts.(attNames{x}));
end
% Set _FillValue
netcdf.defVarFill(ncId,...
    varId,...
    false,...
    FLOAT_FILL_VALUE);
% Set variable compression
netcdf.defVarDeflate(ncId,...
    varId,...
    true,...
    true,...
    1);

% lon
% Define profile_time variable
varId = netcdf.defVar(ncId,...
    'lon',...
    netcdf.getConstant('NC_DOUBLE'),...
    rowDim);
% Define and add attributes
varAtts = struct('long_name', 'Longitude',...
    'standard_name', 'longitude',...
    'units', 'degrees_east');
attNames = sort(fieldnames(varAtts));
for x = 1:length(attNames)
    netcdf.putAtt(ncId, varId, attNames{x}, varAtts.(attNames{x}));
end
% Set _FillValue
netcdf.defVarFill(ncId,...
    varId,...
    false,...
    FLOAT_FILL_VALUE);
% Set variable compression
netcdf.defVarDeflate(ncId,...
    varId,...
    true,...
    true,...
    1);

% Define pressure variable
varId = netcdf.defVar(ncId,...
    'pressure',...
    netcdf.getConstant('NC_DOUBLE'),...
    rowDim);
% Define and add attributes
varAtts = struct('long_name', 'Pressure, dbar',...
    'standard_name', 'sea_water_pressure',...
    'units', 'dbar',...
    'valid_min', 0,...
    'valid_max', 2000,...
    'instrument', 'instrument_ctd',...
    'observation_type', 'calculated',...
    'positive', 'down',...
    'reference_datum', 'sea-surface');
attNames = sort(fieldnames(varAtts));
for x = 1:length(attNames)
    netcdf.putAtt(ncId, varId, attNames{x}, varAtts.(attNames{x}));
end
% Set _FillValue
netcdf.defVarFill(ncId,...
    varId,...
    false,...
    FLOAT_FILL_VALUE);
% Set variable compression
netcdf.defVarDeflate(ncId,...
    varId,...
    true,...
    true,...
    1);

% Define depth variable
varId = netcdf.defVar(ncId,...
    'depth',...
    netcdf.getConstant('NC_DOUBLE'),...
    rowDim);
% Define and add attributes
varAtts = struct('long_name', 'Depth, m',...
    'standard_name', 'depth',...
    'units', 'meters',...
    'valid_min', 0,...
    'valid_max', 2000,...
    'comment', '',...
    'instrument', 'instrument_ctd',...
    'observation_type', 'calculated',...
    'positive', 'down',...
    'reference_datum', 'sea-surface');
attNames = sort(fieldnames(varAtts));
for x = 1:length(attNames)
    netcdf.putAtt(ncId, varId, attNames{x}, varAtts.(attNames{x}));
end
% Set _FillValue
netcdf.defVarFill(ncId,...
    varId,...
    false,...
    FLOAT_FILL_VALUE);
% Set variable compression
netcdf.defVarDeflate(ncId,...
    varId,...
    true,...
    true,...
    1);

% Define temperature variable
varId = netcdf.defVar(ncId,...
    'temperature',...
    netcdf.getConstant('NC_DOUBLE'),...
    rowDim);
% Define and add attributes
varAtts = struct('long_name', 'Temperature, Celsius',...
    'standard_name', 'sea_water_temperature',...
    'units', 'Celsius',...
    'valid_min', -5,...
    'valid_max', 40,...
    'instrument', 'instrument_ctd',...
    'observation_type', 'measured');
attNames = sort(fieldnames(varAtts));
for x = 1:length(attNames)
    netcdf.putAtt(ncId, varId, attNames{x}, varAtts.(attNames{x}));
end
% Set _FillValue
netcdf.defVarFill(ncId,...
    varId,...
    false,...
    FLOAT_FILL_VALUE);
% Set variable compression
netcdf.defVarDeflate(ncId,...
    varId,...
    true,...
    true,...
    1);

% Define conductivity variable
varId = netcdf.defVar(ncId,...
    'conductivity',...
    netcdf.getConstant('NC_DOUBLE'),...
    rowDim);
% Define and add attributes
varAtts = struct('long_name', 'Conductivity, S m-1',...
    'standard_name', 'sea_water_electrical_conductivity',...
    'units', 'S m-1',...
    'valid_min', 0,...
    'valid_max', 10,...
    'instrument', 'instrument_ctd',...
    'observation_type', 'measured');
attNames = sort(fieldnames(varAtts));
for x = 1:length(attNames)
    netcdf.putAtt(ncId, varId, attNames{x}, varAtts.(attNames{x}));
end
% Set _FillValue
netcdf.defVarFill(ncId,...
    varId,...
    false,...
    FLOAT_FILL_VALUE);
% Set variable compression
netcdf.defVarDeflate(ncId,...
    varId,...
    true,...
    true,...
    1);

% Define salinity variable
varId = netcdf.defVar(ncId,...
    'salinity',...
    netcdf.getConstant('NC_DOUBLE'),...
    rowDim);
% Define and add attributes
varAtts = struct('long_name', 'Salinity, PSU',...
    'standard_name', 'sea_water_salinity',...
    'units', '1',...
    'valid_min', 0,...
    'valid_max', 40,...
    'instrument', 'instrument_ctd',...
    'observation_type', 'calculated');
attNames = sort(fieldnames(varAtts));
for x = 1:length(attNames)
    netcdf.putAtt(ncId, varId, attNames{x}, varAtts.(attNames{x}));
end
% Set _FillValue
netcdf.defVarFill(ncId,...
    varId,...
    false,...
    FLOAT_FILL_VALUE);
% Set variable compression
netcdf.defVarDeflate(ncId,...
    varId,...
    true,...
    true,...
    1);

% Define density variable
varId = netcdf.defVar(ncId,...
    'density',...
    netcdf.getConstant('NC_DOUBLE'),...
    rowDim);
% Define and add attributes
varAtts = struct('long_name', 'Density, kg m-3',...
    'standard_name', 'sea_water_density',...
    'units', 'kg m-3',...
    'valid_min', 1015,...
    'valid_max', 1040,...
    'instrument', 'instrument_ctd',...
    'observation_type', 'calculated');
attNames = sort(fieldnames(varAtts));
for x = 1:length(attNames)
    netcdf.putAtt(ncId, varId, attNames{x}, varAtts.(attNames{x}));
end
% Set _FillValue
netcdf.defVarFill(ncId,...
    varId,...
    false,...
    FLOAT_FILL_VALUE);
% Set variable compression
netcdf.defVarDeflate(ncId,...
    varId,...
    true,...
    true,...
    1);

% Define density variable
varId = netcdf.defVar(ncId,...
    'chla',...
    netcdf.getConstant('NC_DOUBLE'),...
    rowDim);
% Define and add attributes
varAtts = struct('long_name', 'Chlorophyll a Concentration, ug L-1',...
    'standard_name', 'mass_concentration_of_chlorophyll_a_in_sea_water',...
    'units', 'ug L-1',...
    'valid_min', 0,...
    'valid_max', 20,...
    'instrument', 'instrument_flbb',...
    'observation_type', 'measured');
attNames = sort(fieldnames(varAtts));
for x = 1:length(attNames)
    netcdf.putAtt(ncId, varId, attNames{x}, varAtts.(attNames{x}));
end
% Set _FillValue
netcdf.defVarFill(ncId,...
    varId,...
    false,...
    FLOAT_FILL_VALUE);
% Set variable compression
netcdf.defVarDeflate(ncId,...
    varId,...
    true,...
    true,...
    1);

% Define density variable
varId = netcdf.defVar(ncId,...
    'bb',...
    netcdf.getConstant('NC_DOUBLE'),...
    rowDim);
% Define and add attributes
varAtts = struct('long_name', 'Volume Scattering Function, Beta(117,650), m-1 sr-1',...
    'units', 'm-1 sr-1',...
    'valid_min', 0,...
    'valid_max', 0.1,...
    'instrument', 'instrument_flbb',...
    'observation_type', 'measured');
attNames = sort(fieldnames(varAtts));
for x = 1:length(attNames)
    netcdf.putAtt(ncId, varId, attNames{x}, varAtts.(attNames{x}));
end
% Set _FillValue
netcdf.defVarFill(ncId,...
    varId,...
    false,...
    FLOAT_FILL_VALUE);
% Set variable compression
netcdf.defVarDeflate(ncId,...
    varId,...
    true,...
    true,...
    1);

% Define density variable
varId = netcdf.defVar(ncId,...
    'oxygen_sat',...
    netcdf.getConstant('NC_DOUBLE'),...
    rowDim);
% Define and add attributes
varAtts = struct('long_name', 'Estimated Percentage Oxygen Saturation, %',...
    'standard_name', 'fractional_saturation_of_oxygen_in_sea_water',...
    'units', '%',...
    'valid_min', 0,...
    'valid_max', 120,...
    'instrument', 'instrument_optode',...
    'observation_type', 'measured');
attNames = sort(fieldnames(varAtts));
for x = 1:length(attNames)
    netcdf.putAtt(ncId, varId, attNames{x}, varAtts.(attNames{x}));
end
% Set _FillValue
netcdf.defVarFill(ncId,...
    varId,...
    false,...
    FLOAT_FILL_VALUE);
% Set variable compression
netcdf.defVarDeflate(ncId,...
    varId,...
    true,...
    true,...
    1);

% Define density variable
varId = netcdf.defVar(ncId,...
    'oxygen_conc',...
    netcdf.getConstant('NC_DOUBLE'),...
    rowDim);
% Define and add attributes
varAtts = struct('long_name', 'Estimated Oxygen Concentration, uMol L-1',...
    'standard_name', 'mole_concentration_of_dissolved_molecular_oxygen_in_sea_water',...
    'units', 'uMol L-1',...
    'valid_min', 0,...
    'valid_max', 300,...
    'instrument', 'instrument_optode',...
    'observation_type', 'measured');
attNames = sort(fieldnames(varAtts));
for x = 1:length(attNames)
    netcdf.putAtt(ncId, varId, attNames{x}, varAtts.(attNames{x}));
end
% Set _FillValue
netcdf.defVarFill(ncId,...
    varId,...
    false,...
    FLOAT_FILL_VALUE);
% Set variable compression
netcdf.defVarDeflate(ncId,...
    varId,...
    true,...
    true,...
    1);

% % % % % % Define dimensionless depth-averaged current timestamp
% % % % % varId = netcdf.defVar(ncId,...
% % % % %     'time_uv',...
% % % % %     netcdf.getConstant('NC_DOUBLE'),...
% % % % %     []);
% % % % % % Define and add attributes
% % % % % varAtts = struct('long_name', 'Time',...
% % % % %     'standard_name', 'time',...
% % % % %     'units', 'seconds since 1970-01-01T00:00:00Z',...
% % % % %     'ancillary_variables', '');
% % % % % attNames = sort(fieldnames(varAtts));
% % % % % for x = 1:length(attNames)
% % % % %     netcdf.putAtt(ncId, varId, attNames{x}, varAtts.(attNames{x}));
% % % % % end
% % % % % % Set _FillValue
% % % % % netcdf.defVarFill(ncId,...
% % % % %     varId,...
% % % % %     false,...
% % % % %     FLOAT_FILL_VALUE);
% % % % % % Set variable compression
% % % % % netcdf.defVarDeflate(ncId,...
% % % % %     varId,...
% % % % %     true,...
% % % % %     true,...
% % % % %     1);
% % % % % 
% % % % % % Define dimensionless depth-averaged current latitude
% % % % % varId = netcdf.defVar(ncId,...
% % % % %     'lat_uv',...
% % % % %     netcdf.getConstant('NC_DOUBLE'),...
% % % % %     []);
% % % % % % Define and add attributes
% % % % % varAtts = struct('long_name', 'Latitude',...
% % % % %     'standard_name', 'latitude',...
% % % % %     'units', 'degrees_north');
% % % % % attNames = sort(fieldnames(varAtts));
% % % % % for x = 1:length(attNames)
% % % % %     netcdf.putAtt(ncId, varId, attNames{x}, varAtts.(attNames{x}));
% % % % % end
% % % % % % Set _FillValue
% % % % % netcdf.defVarFill(ncId,...
% % % % %     varId,...
% % % % %     false,...
% % % % %     FLOAT_FILL_VALUE);
% % % % % % Set variable compression
% % % % % netcdf.defVarDeflate(ncId,...
% % % % %     varId,...
% % % % %     true,...
% % % % %     true,...
% % % % %     1);
% % % % % 
% % % % % % Define dimensionless depth-averaged current longitude
% % % % % varId = netcdf.defVar(ncId,...
% % % % %     'lon_uv',...
% % % % %     netcdf.getConstant('NC_DOUBLE'),...
% % % % %     []);
% % % % % % Define and add attributes
% % % % % varAtts = struct('long_name', 'Longitude',...
% % % % %     'standard_name', 'longitude',...
% % % % %     'units', 'degrees_east');
% % % % % attNames = sort(fieldnames(varAtts));
% % % % % for x = 1:length(attNames)
% % % % %     netcdf.putAtt(ncId, varId, attNames{x}, varAtts.(attNames{x}));
% % % % % end
% % % % % % Set _FillValue
% % % % % netcdf.defVarFill(ncId,...
% % % % %     varId,...
% % % % %     false,...
% % % % %     FLOAT_FILL_VALUE);
% % % % % % Set variable compression
% % % % % netcdf.defVarDeflate(ncId,...
% % % % %     varId,...
% % % % %     true,...
% % % % %     true,...
% % % % %     1);
% % % % % 
% % % % % % Define dimensionless depth-averaged u
% % % % % varId = netcdf.defVar(ncId,...
% % % % %     'u',...
% % % % %     netcdf.getConstant('NC_DOUBLE'),...
% % % % %     []);
% % % % % % Define and add attributes
% % % % % varAtts = struct('long_name', 'depth-averaged eastward velocity',...
% % % % %     'standard_name', 'eastward_sea_water_velocity',...
% % % % %     'units', 'm s-1');
% % % % % attNames = sort(fieldnames(varAtts));
% % % % % for x = 1:length(attNames)
% % % % %     netcdf.putAtt(ncId, varId, attNames{x}, varAtts.(attNames{x}));
% % % % % end
% % % % % % Set _FillValue
% % % % % netcdf.defVarFill(ncId,...
% % % % %     varId,...
% % % % %     false,...
% % % % %     FLOAT_FILL_VALUE);
% % % % % % Set variable compression
% % % % % netcdf.defVarDeflate(ncId,...
% % % % %     varId,...
% % % % %     true,...
% % % % %     true,...
% % % % %     1);
% % % % % 
% % % % % % Define dimensionless depth-averaged v
% % % % % varId = netcdf.defVar(ncId,...
% % % % %     'v',...
% % % % %     netcdf.getConstant('NC_DOUBLE'),...
% % % % %     []);
% % % % % % Define and add attributes
% % % % % varAtts = struct('long_name', 'depth-averaged northward velocity',...
% % % % %     'standard_name', 'northward_sea_water_velocity',...
% % % % %     'units', 'm s-1');
% % % % % attNames = sort(fieldnames(varAtts));
% % % % % for x = 1:length(attNames)
% % % % %     netcdf.putAtt(ncId, varId, attNames{x}, varAtts.(attNames{x}));
% % % % % end
% % % % % % Set _FillValue
% % % % % netcdf.defVarFill(ncId,...
% % % % %     varId,...
% % % % %     false,...
% % % % %     FLOAT_FILL_VALUE);
% % % % % % Set variable compression
% % % % % netcdf.defVarDeflate(ncId,...
% % % % %     varId,...
% % % % %     true,...
% % % % %     true,...
% % % % %     1);

% Define dimensionless profile_id
varId = netcdf.defVar(ncId,...
    'profile_id',...
    netcdf.getConstant('NC_INT'),...
    []);
% Define and add attributes
varAtts = struct('long_name', 'Sequential Profile ID',...
    'units', '1');
attNames = sort(fieldnames(varAtts));
for x = 1:length(attNames)
    netcdf.putAtt(ncId, varId, attNames{x}, varAtts.(attNames{x}));
end
% Set _FillValue
netcdf.defVarFill(ncId,...
    varId,...
    false,...
    BYTE_FILL_VALUE);
% Set variable compression
netcdf.defVarDeflate(ncId,...
    varId,...
    true,...
    true,...
    1);
% Fill in the profile_id value
[~,I] = intersect(ncVars, 'profile_id');
pStruct.vars(I).data = PROFILE_ID;

% Define dimensionless profile_time
varId = netcdf.defVar(ncId,...
    'profile_time',...
    netcdf.getConstant('NC_DOUBLE'),...
    []);
% Define and add attributes
varAtts = struct('long_name', 'Profile Center Time',...
    'standard_name', 'time',...
    'units', 'seconds since 1970-01-01T00:00:00Z');
attNames = sort(fieldnames(varAtts));
for x = 1:length(attNames)
    netcdf.putAtt(ncId, varId, attNames{x}, varAtts.(attNames{x}));
end
% Set _FillValue
netcdf.defVarFill(ncId,...
    varId,...
    false,...
    FLOAT_FILL_VALUE);
% Set variable compression
netcdf.defVarDeflate(ncId,...
    varId,...
    true,...
    true,...
    1);
% Fill in the profile_id value
[~,I] = intersect(ncVars, 'profile_time');
pStruct.vars(I).data =...
    mean([pStruct.meta.startDatenum pStruct.meta.endDatenum]);

% Define dimensionless profile_lat
varId = netcdf.defVar(ncId,...
    'profile_lat',...
    netcdf.getConstant('NC_DOUBLE'),...
    []);
% Define and add attributes
varAtts = struct('long_name', 'Profile Center Latitude',...
    'standard_name', 'latitude',...
    'units', 'degrees_north');
attNames = sort(fieldnames(varAtts));
for x = 1:length(attNames)
    netcdf.putAtt(ncId, varId, attNames{x}, varAtts.(attNames{x}));
end
% Set _FillValue
netcdf.defVarFill(ncId,...
    varId,...
    false,...
    FLOAT_FILL_VALUE);
% Set variable compression
netcdf.defVarDeflate(ncId,...
    varId,...
    true,...
    true,...
    1);
% Fill in the profile_lat value
[~,I] = intersect(ncVars, 'profile_lat');
pStruct.vars(I).data = round(pStruct.meta.lonLat(2)*100000)/100000;

% Define dimensionless profile_lon
varId = netcdf.defVar(ncId,...
    'profile_lon',...
    netcdf.getConstant('NC_DOUBLE'),...
    []);
% Define and add attributes
varAtts = struct('long_name', 'Profile Center Longitude',...
    'standard_name', 'longitude',...
    'units', 'degrees_east');
attNames = sort(fieldnames(varAtts));
for x = 1:length(attNames)
    netcdf.putAtt(ncId, varId, attNames{x}, varAtts.(attNames{x}));
end
% Set _FillValue
netcdf.defVarFill(ncId,...
    varId,...
    false,...
    FLOAT_FILL_VALUE);
% Set variable compression
netcdf.defVarDeflate(ncId,...
    varId,...
    true,...
    true,...
    1);
% Fill in the profile_lon value
[~,I] = intersect(ncVars, 'profile_lon');
pStruct.vars(I).data = round(pStruct.meta.lonLat(1)*100000)/100000;

% Get out of define mode
netcdf.endDef(ncId);

% Add the trajectory variable data
varId = netcdf.inqVarID(ncId, 'trajectory');
netcdf.putVar(ncId, varId, trajectoryString);

pVars = {pStruct.vars.ncVarName}';
for p = 1:length(pVars)
    
%     pVars{p}
%     if strcmp(pVars{p}, 'chla')
%         keyboard;
%     end
    
    try
        varId = netcdf.inqVarID(ncId, pVars{p});
    catch ME
        warning(sprintf('%s:%s', app, ME.identifier),...
            '%s: %s\n', pVars{p}, ME.message);
        continue;
    end
    
    % Grab the data
    data = pStruct.vars(p).data;
    
    if ismember(pVars{p}, SCALAR_VARS)
        if isempty(data)
            data = NaN;
        elseif ~isequal(length(data),1)
            warning(sprintf('%s:scalarRequired', app),...
                'Value for NetCDF variable %s must be a scalar: Using scalar _FillValue',...
                pVars{p});
            data = NaN;
        end
    elseif ~isequal(length(pStruct.vars(p).data(goodRows)), NUM_ROWS)
        warning(sprintf('%s:varLength', app),...
            'Array for NetCDF variable %s does has incorrect size\n',...
            pVars{p});
        continue;
    else
        data = data(goodRows);
    end
    
    % Convert any data for which the variable contains the string 'time'
    % and the data appears to be datenum.m
    if ~isempty(regexp(pVars{p}, 'time', 'once'))
        meanVal = mean(data(~isnan(data)));
        if meanVal < DATENUM_CUTOFF
            data = datenum2epoch(data);
        end
    end
      
    % Replace NaNs with _FillValues
    [~, fillValue] = netcdf.inqVarFill(ncId, varId);
    data(isnan(data)) = fillValue;

    try
        netcdf.putVar(ncId, varId, data);
    catch
        keyboard;
    end
    
end

netcdf.close(ncId);

